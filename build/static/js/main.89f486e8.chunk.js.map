{"version":3,"sources":["App.js","serviceWorker.js","index.js","BTS 3 Discs - Gradient.png"],"names":["App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","console","log","updatedList","filter","item","i","length","input","className","src","btsLogo","width","style","border","borderRadius","boxShadow","type","onChange","e","updateInput","target","aria-describedby","placeholder","required","onClick","addItem","disabled","map","key","name","checked","isDoneToDo","paddingTop","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.89f486e8.chunk.js","sourcesContent":["import React from 'react';\nimport btsLogo from './BTS 3 Discs - Gradient.png';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newItem: '',\n      list: []\n    }\n  }\n  \n  addItem(todoValue) {\n    if (todoValue !== '') {\n      \n      const newItem = {\n        id: Date.now(),\n        value: todoValue,\n        isDone: false\n      };\n\n      const list = [...this.state.list];\n      list.push(newItem);\n\n      this.setState({\n        list,\n        newItem: ''\n      });\n    }\n\n    console.log(this.state.list);\n  }\n\n  deleteItem(id) {\n    const list = [...this.state.list];\n\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({\n      list: updatedList\n    });\n\n    console.log(this.state.list);\n  }\n\n  isDoneToDo(id) {\n    const updatedList = [...this.state.list];\n\n    for(let i = 0; i < updatedList.length; i++) {\n      if ( updatedList[i].id === id) {\n        updatedList[i].isDone = true;\n      }\n    }\n  \n    this.setState({\n      list: updatedList\n    });\n\n    console.log(this.state.list);\n  }\n\n  \n  updateInput(input) {\n    this.setState({\n      newItem: input\n    });\n\n    console.log(this.state.list);\n  }\n\n  render() {\n    return(\n      <div className=\"jumbotron\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-3\">\n            </div>\n            \n            <div className=\"col-6 struct-holder\">\n              <div className=\"struct-img\">\n                <img src={btsLogo} width=\"5%\" className=\"logo-img\" />\n              </div>\n                <h1 className=\"app-title\">ToDo  App</h1>\n                <hr style={{border: '0.1em solid #f33b70', borderRadius: '2em', boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'}} />\n\n                <div className=\"todo-holder\">\n                  <div className=\"form-group\">\n                    <h5 className=\"InputItem\">Add Item's..</h5>\n                    <div className=\"row\">\n                      <div className=\"col-9\">\n                        <input type=\"text\" className=\"form-control\" value={this.state.newItem} onChange={e => this.updateInput(e.target.value)} id=\"InputItem\" aria-describedby=\"emailHelp\" placeholder=\"Add Item's here..\" required /> \n                      </div>\n                      <div className=\"col-3\">\n                        <button type=\"button\" className=\"btn btn-warning\" onClick={() => this.addItem(this.state.newItem)} disabled={!this.state.newItem.length} >Add ToDo</button>\n                      </div>\n                    </div>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Please enter ToDo Item in above box.</small>\n                  </div>\n\n                  <div className=\"todo-list-container\">\n                    <ul className=\"todo-list\">\n                      {this.state.list.map(item => {\n                        return(\n                          <li key={item.id}>\n                            <div className=\"form-group form-check \">\n                              <div className=\"row\">\n                                <div className=\"col-8 todo-list-text\">\n                                  <input type=\"checkbox\"  name=\"idDone\" checked={item.isDone} onChange={() => this.isDoneToDo(item.id)} className=\"form-check-input\" id=\"exampleCheck1\" />\n                                  <h6 className=\"form-check-label\"  style={{paddingTop: '0.1em'}}>{item.value}</h6>\n                                </div>\n                                <div className=\"col-4\">\n                                  <button type=\"button\" onClick={() => this.deleteItem(item.id)} className=\"btn btn-warning\">Delete ToDo</button>\n                                </div>\n                              </div>\n                            </div>\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            \n            <div className=\"col-3\">\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/BTS 3 Discs - Gradient.f1108233.png\";"],"sourceRoot":""}